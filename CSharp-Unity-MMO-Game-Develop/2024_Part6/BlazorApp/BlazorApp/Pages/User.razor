@page "/user"

@using BlazorApp.Data;

<h3>Online Users</h3>

<p>
	Users: <b>@_users.Count()</b>
</p>

<br />

<ul class="list-group">
	<!-- 이름 출력 -->
	@foreach (var user in _users)
	{
		<li @key="user" class="list-group-item">
			<!-- 유저 삭제 -->
			<button type="button" class="btn btn-link" @onclick="() => KickUser(user)">Kick</button>
			<label>@user.Name</label>
		</li>
	}
</ul>

<br />

<!-- 유저 추가 -->
<div class="container">
	<div class="row">
		<div class="col">
			<input class="form-control" placeholder="Add User" @bind-value="_inputName" />
		</div>
		<div class="col">
			<!-- HTML의 속성(attribue)에도 바인딩을 할 수 있다. -->
			<!-- conditional attribue 속성 자체에 조건을 붙일 수도 있다. -->
			<button class="@_btnClass" type="button" @onclick="AddUser" disabled="@(_users.Count() >= 5)">Add a User</button>
		</div>
	</div>
</div>
	

@code
{
	// 유저 데이터 생성 
	List<UserData> _users = new List<UserData>();

	// 유저 이름 입력
	string _inputName;
	string _btnClass = "btn btn-primary";

	// 유저 데이터 추가
	protected override void OnInitialized()
	{
		_users.Add(new UserData() { Name = "Shung" });
		_users.Add(new UserData() { Name = "Kong" });
		_users.Add(new UserData() { Name = "Hi" });
		RefreshButton();
	}

	void AddUser()
	{
		_users.Add(new UserData() { Name = _inputName });
		_inputName = string.Empty;
		RefreshButton();
	}

	void KickUser(UserData user)
	{
		_users.Remove(user);
		RefreshButton();
	}

	void RefreshButton()
	{
		if (_users.Count() % 2 == 0)
		{
			_btnClass = "btn btn-primary";
		}
		else
		{
			_btnClass = "btn btn-secondary";
		}
	}
}
